
trigger:
- master
variables:
  acr_container_name: 'acrspringimages'
  app_service_plan: 'aspraghebspringbootapp'
  varResoursegroupname: 'raghebspringbootapprg'
  mysqlsever_name: 'raghebspringbootappmysqlserver'
  Webapp_Name: 'raghebspringbootwebapp'
  AKSClustername: 'raghebspringbootakscluster'
  mysqldb: 'employee_prod'
  VSTS_ARM_REST_IGNORE_SSL_ERRORS: true
  arm_outoput: ''



stages:
- stage: Build
  displayName: 'build the IOC image registry and empty SQL'
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: BuildIOC
    steps:
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: 'Arm-ServiceConnection'
            action: 'Create Or Update Resource Group'
            resourceGroupName: $(varResoursegroupname)
            location: 'Central US'
            templateLocation: 'URL of the file'
            csmFileLink: 'https://raw.githubusercontent.com/moragheb/react-and-spring-data-rest/master/Environemnet%20ARM%20Template/template.json'
            deploymentMode: 'Incremental'
            csmParametersFile: https://raw.githubusercontent.com/moragheb/react-and-spring-data-rest/master/Environemnet%20ARM%20Template/template.json'
            overrideParameters: '-ACRContainer $(acr_container_name) -MYSQLServerName $(mysqlsever_name)'
            deploymentOutputs: arm_outoput
- stage: Compile
  displayName: 'build the code base and code coverage-docker and K8s files'
  dependsOn: []
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: compile
    steps:
        - task: Maven@3
          inputs:
            mavenPomFile: 'pom.xml'
            options: 'clean'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            codeCoverageToolOption: 'Cobertura'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.8'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false
            sonarQubeRunAnalysis: false
            codeCoverageSourceDirectories: src/main    

        - task: CopyFiles@2
          displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
          inputs:
            SourceFolder: '$(system.defaultworkingdirectory)'
            Contents: '**/*.jar'
            TargetFolder: '$(build.artifactstagingdirectory)'
          condition: succeededOrFailed()
        
        - task: PublishBuildArtifacts@1
          displayName: 'public the Kubernettes manifest file'
          inputs:
            PathtoPublish: '$(Pipeline.Workspace)/s/Kubernetes'
            ArtifactName: 'manifests'
          condition: succeededOrFailed()   
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: Package-build'
          inputs:
            PathtoPublish: '$(build.artifactstagingdirectory)'
            ArtifactName: 'Package-build'
          condition: succeededOrFailed()    
- stage: Dockerbuild
  displayName: 'build the docker image and push to  Azure Container registry'
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: dockerpush
    steps:
        - task: Docker@1
          displayName: 'build an image'
          inputs:
            azureSubscriptionEndpoint: 'Arm-ServiceConnection'
            azureContainerRegistry: acr$(varResoursegroupname).azurecr.io
            dockerFile: Dockerfile
            imageName: 'SpringAppImage'
            includeLatestTag: true
            useDefaultContext: false
            buildContext: .

        - task: Docker@1
          displayName: 'Push Image'
          inputs:
            azureSubscriptionEndpoint: 'Arm-ServiceConnection'
            azureContainerRegistry: acr$(varResoursegroupname).azurecr.io
            command: 'Push an image'
            imageName: 'SpringAppImage'
- stage: Stagingwebapp
  displayName: 'Deploy image to stage web app'
  dependsOn: 'Dockerbuild'
  pool:
    vmImage: 'windows-latest'
  jobs:
  - job: 'Createapp'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Arm-ServiceConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          #create the web service plan
          az appservice plan create --name $(app_service_plan) --resource-group $(varResoursegroupname)  --is-linux --sku S1
          
          #set the auto Scale on the  app service plan
          az monitor autoscale create  --resource-group $(varResoursegroupname) --resource $(app_service_plan) --resource-type Microsoft.Web/serverFarms --name autoscale --count 2 --min-count 2 --max-count 5 --count 2
          az monitor autoscale rule create  --resource-group $(varResoursegroupname) --autoscale-name autoscale  --condition "CpuPercentage > 70 avg 10m" --scale out 3
          az monitor autoscale rule create  --resource-group $(varResoursegroupname) --autoscale-name autoscale  --condition "CpuPercentage < 30  avg 10m" --scale in 1
          
          #create the Web App
          az webapp create --resource-group $(varResoursegroupname) --plan $(app_service_plan) --name $(Webapp_Name) --deployment-container-image-name acr$(varResoursegroupname).azurecr.io/springappimage:latest
          
          #create the Deployment Slot
          az webapp deployment slot create --name $(Webapp_Name) --resource-group $(varResoursegroupname) --slot staging
          
          #set the web app ruunning port
          az webapp config appsettings set --resource-group $(varResoursegroupname) --name $(Webapp_Name) --settings WEBSITES_PORT=8080

          #use the system manged identity to reach the image in the image registry
          $SubscriptionID = az account show --query id -o tsv
          $principal_ID=az webapp identity assign --resource-group $(varResoursegroupname) --name $(Webapp_Name) --query principalId -o tsv 
          az role assignment create --assignee $principal_ID --scope /subscriptions/$SubscriptionID/resourceGroups/$varResoursegroupname/providers/Microsoft.ContainerRegistry/registries/acrspringbootimages --role "AcrPull"
          az resource update --ids /subscriptions/$SubscriptionID/resourceGroups/$varResoursegroupname/providers/Microsoft.Web/sites/$Webapp_Name/config/web --set properties.acrUseManagedIdentityCreds=True

          
          #pull the image and deploy it 
          az webapp config container set  --name $(Webapp_Name) --resource-group $(varResoursegroupname) --docker-custom-image-name acr$(varResoursegroupname).azurecr.io/springappimage:latest --docker-registry-server-url https://acr$(varResoursegroupname).azurecr.io
- stage: productionwithAKS
  displayName: 'Deploy image to production POD in AKS with SQL DB'
  dependsOn: 'Stagingwebapp'
  pool:
    vmImage: 'windows-latest'
  jobs:
  - job: 'deploytoAKS'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Arm-ServiceConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
         #create an AKS Cluster 
         az aks create --resource-group $(varResoursegroupname) --name $(AKSClustername) --node-count 1 --enable-addons monitoring --generate-ssh-keys
         az aks update -n $(AKSClustername) -g $(varResoursegroupname) --attach-acr acr$(varResoursegroupname)
         #create an Empty DB
         az mysql db create --name $(mysqldb) --resource-group $(varResoursegroupname)  --server-name $(varResoursegroupname)-SQLServer