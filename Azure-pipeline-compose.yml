
trigger:
- master
variables:
  #Azure containter Registry name 
  acr_container_name: 'acrraghebspringimages'
  #Azure App service Plan for staging name
  app_service_plan: 'aspraghebspringplan'
  #Azure Resource group name
  varResoursegroupname: 'raghebspringrg'
  #Azyre mysql server name
  mysqlsever_name: 'raghebspringsqlserver'
  #azure web app name for staging environemnt
  Webapp_Name: 'raghebspringbootlatestwithcomposereactapp'
  #azure Kubernets Cluster name
  AKSClustername: 'raghebspringakslatestcluster'
  #Service Connections name
  AZ_ServiceConn: 'Arm-ServiceConnection'
  AKS_ServiceConn: 'AKSClusterConnection'
  ACR_ServiceConn: 'ACRConnection'     
  #my sql database name
  mysqldb: 'employee_prod'
  




stages:
- stage: Build
  displayName: 'use the Json template to build a azure for mySQL server and azure image registry'
  jobs:
  - deployment: buildIOC
    displayName: deploy the infrastructure
    pool:
      vmImage: 'Ubuntu-latest'
    # creates an environment if it doesn't exist
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
         steps: 
           - checkout: self
           -   task: "AzureResourceGroupDeployment@2"
               inputs:
                azureSubscription: $(AZ_ServiceConn)
                action: 'Create Or Update Resource Group'
                resourceGroupName: $(varResoursegroupname)
                location: 'Central US'
                templateLocation: 'URL of the file'
                csmFileLink: 'https://raw.githubusercontent.com/moragheb/react-and-spring-data-rest/master/Environemnet%20ARM%20Template/template.json'
                deploymentMode: 'Incremental'
                csmParametersFile: https://raw.githubusercontent.com/moragheb/react-and-spring-data-rest/master/Environemnet%20ARM%20Template/template.json'
                overrideParameters: '-ACRContainer $(acr_container_name) -MYSQLServerName $(mysqlsever_name)'
                deploymentOutputs: arm_outoput
- stage: Compile
  displayName: 'build the code base using maven and code coverage-docker and K8s files'
  dependsOn: []
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: compile
    steps:
        - task: Maven@3
          inputs:
            mavenPomFile: '$(System.DefaultWorkingDirectory)/pom.xml'
            options: 'clean'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            codeCoverageToolOption: 'Cobertura'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.8'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false
            sonarQubeRunAnalysis: false
            codeCoverageSourceDirectories: src/main    

        - task: CopyFiles@2
          displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
          inputs:
            SourceFolder: '$(system.defaultworkingdirectory)'
            Contents: '**/*.jar'
            TargetFolder: '$(build.artifactstagingdirectory)'
          condition: succeededOrFailed()
        
        - task: PublishBuildArtifacts@1
          displayName: 'public the Kubernettes manifest file'
          inputs:
            PathtoPublish: '$(Pipeline.Workspace)/s/Kubernetes'
            ArtifactName: 'manifests'
          condition: succeededOrFailed()   
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: Package-build'
          inputs:
            PathtoPublish: '$(build.artifactstagingdirectory)'
            ArtifactName: 'Package-build'
          condition: succeededOrFailed()    
- stage: DockerComposeBuild
  displayName: 'build the docker Compose and push to  Azure Container registry'
  dependsOn: 
  - 'Build'
  - 'Compile'
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: dockercomposepush
    steps:
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Arm-ServiceConnection'
        azureContainerRegistry: '$acr_container_name'
        additionalImageTags: $(Build.BuildId)        
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Build services'
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Arm-ServiceConnection'
        azureContainerRegistry: '$acr_container_name'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Push services'
        includeSourceTags: true
        includeLatestTag: true
        
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**/*.yml'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'manifest'
        publishLocation: 'Container'
      condition:  succeededOrFailed()  
- stage: createproductionencironemnt
  displayName: 'create production AKS CLuster and grant it access to the registry also upload the DACPAC of the Expored mySQL DB to the '
  dependsOn: 'DockerComposeBuild'
  jobs:
  - deployment: 'buildtheAKSCluster'
    displayName: 'deploy the prod environemnt'
    pool:
      vmImage: 'windows-latest'
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
         steps: 
           - checkout: self
           -   task: "AzureCLI@2"
               inputs:
                  azureSubscription: $(AZ_ServiceConn)
                  scriptType: ps
                  addSpnToEnvironment: true
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                      #create an AKS Cluster
                      $ARM_CLIENT_ID=$servicePrincipalId 
                      $ARM_CLIENT_Key=$servicePrincipalKey
                      az aks create --resource-group $(varResoursegroupname) --name $(AKSClustername) --node-count 1 --enable-addons monitoring --generate-ssh-keys
                      az aks update -n $(AKSClustername) -g $(varResoursegroupname) --attach-acr $(acr_container_name)
                      #create the SQL DB
                      az mysql db create --name $(mysqldb) --resource-group $(varResoursegroupname)  --server-name $(mysqlsever_name)
                      #create SPN to access the ACR
                      $ACR_REGISTRY_ID=$(az acr show --name $(acr_container_name) --query id --output tsv)                      
                      #az role assignment create --assignee $(ARM_CLIENT_ID) --scope $ACR_REGISTRY_ID --role acrpull

#- stage: deployimagetoAKSanddacpactosql
#  displayName: 'deploy to AKS cluser and upload the DACPAC to the mysqldb'
#  dependsOn: 'createproductionencironemnt'
#  variables:
#    ImagePullSecret: k8sraghebsecret  
#  pool:
#    vmImage: 'ubuntu-latest'
#  jobs:
#  - deployment: 'deployapptoAKS'
#    displayName: 'deploy the AKS Cluster'
#    pool:
#      vmImage: 'ubuntu-latest'
#    environment: 'prod'
#    strategy:
#      runOnce:
#        deploy:
#         steps: 
#           - checkout: self
        
#           - task:  "KubernetesManifest@0"
#             displayName: "Create an image pull secret"
#             inputs:
#               action:  "createSecret"
#               kubernetesServiceConnection: $(AKS_ServiceConn)
#               namespace: 'default'
#               secretName: $(ImagePullSecret)
#               secretType: 'dockerRegistry'
#               dockerRegistryEndpoint: $(ACR_ServiceConn)  
         #  - task  : "KubernetesManifest@0"
         #    displayName: Deploy to Kubernetes cluster
         #    inputs:
         #     action: deploy
         #     namespace: 'default'
         #     kubernetesServiceConnection: $(AKS_ServiceConn)
         #     imagePullSecrets: |
         #           $(imagePullSecret)
         #     manifests: |
         #       $(Pipeline.Workspace)/manifests/reactandspringdatarest-deployment.yml
         #       $(Pipeline.Workspace)/manifests/reactandspringdatarest-service.yml
         #     containers: |
         #       $(acr_container_name)/"SpringAppImage:latest" 



                        
                  
